//// PLUGINS
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply from: 'installation/apply-local.groovy'

//// CONFIGURATION
configurations {
	releaseArtifacts {}
	installers {}
	latestInstallers {}
	deployerJars {}
}

repositories {
	mavenCentral()
	mavenRepo url: 'http://m2repo.spockframework.org/snapshots'
}

dependencies {
	compile gradleApi(),
			'org.ajoberstar:gradle-git:0.5.0'
	groovy localGroovy()
	testCompile('org.spockframework:spock-core:0.5-groovy-1.8') { exclude group: 'org.codehaus.groovy' }
	testCompile 'junit:junit:4.10'
	deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
}

signing {
	sign configurations.releaseArtifacts
}

//// TASKS
createReleaseTag.dependsOn uploadReleaseArtifacts
createReleaseTag.dependsOn uploadInstallers

updateVersion << {
	// This updates the apply script with the new version.
	def applyFile = new File("installation", "apply.groovy")
	def readmeFile = new File("README.md")
	def oldVersion = project.getProperty("release.oldVersion")
	def newVersion = project.getProperty("release.newVersion")
	ant.replace(file: applyFile, token: "${group}:${name}:${oldVersion}", value: "${group}:${name}:${newVersion}")
	ant.replaceregexp(file: readmeFile, match: "Current Version: .*?\$", replace: "Current Version: ${oldVersion}", byline: true)
	ant.replaceregexp(file: readmeFile, match: "gradle-release/\\d+\\.\\d+/apply.groovy", replace: "gradle-release/${oldVersion}/apply.groovy", byline: true)
}

uploadReleaseArtifacts {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
				authentication(userName: releaseRepoUser, password: releaseRepoPass)
			}
			pom.project {
				name 'gradle-release'
				packaging 'jar'
				description 'gradle-release is a plugin for providing a Maven-like release process to project using Gradle.'
				url 'https://github.com/townsfolk/gradle-release'

				scm {
					url 'scm:git@github.com:townsfolk/gradle-release.git'
					connection 'scm:git@github.com:townsfolk/gradle-release.git'
					developerConnection 'scm:git@github.com:townsfolk/gradle-release.git'
				}

				licenses {
					license {
						name 'The MIT License (MIT)'
						url 'http://opensource.org/licenses/MIT'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'townsfolk'
						name 'Eric Berry'
					}
				}
			}
		}
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

//// DEPLOYMENT
uploadInstallers {
	repositories {
		add(new org.apache.ivy.plugins.resolver.SFTPResolver()) {
			host = releaseRepoHost
			addArtifactPattern "${releaseRepoBase}/[module]/[revision]/[artifact].[ext]"
		}
	}
}

uploadLatestInstallers {
	repositories {
		add(new org.apache.ivy.plugins.resolver.SFTPResolver()) {
			host = releaseRepoHost
			addArtifactPattern "${releaseRepoBase}/[module]/[artifact].[ext]"
		}
	}
}

artifacts {
	releaseArtifacts jar
	releaseArtifacts javadocJar
	releaseArtifacts sourcesJar
	installers file('installation/apply.groovy')
	latestInstallers file('installation/apply.groovy')
}